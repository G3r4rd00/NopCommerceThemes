@model ProductDetailsModel
@using Nop.Core.Domain.Orders
@if (Model.AddToCart.UpdatedShoppingCartItemId > 0)
{
    <input asp-for="@Model.AddToCart.UpdatedShoppingCartItemId" type="hidden" />
}
@if (!Model.AddToCart.DisableBuyButton || Model.AddToCart.CustomerEntersPrice)
{
    if (!string.IsNullOrEmpty(Model.AddToCart.PreOrderAvailabilityStartDateTimeUserTime))
    {
        <div class="pre-order-availability-date">
            <label>@T("ShoppingCart.PreOrderAvailability"):</label>
            @Html.Raw(Model.AddToCart.PreOrderAvailabilityStartDateTimeUserTime)
        </div>
    }
    <div class="add-to-cart" style="margin-top:30px">
        @if (!Model.AddToCart.DisableBuyButton && Model.InStock)
        {
            <div class="add-to-cart-panel">
                <label asp-for="@Model.AddToCart.EnteredQuantity" asp-postfix=":" class="qty-label"></label>
                @if (Model.AddToCart.AllowedQuantities.Count > 0)
                {
                    <select asp-for="@Model.AddToCart.EnteredQuantity" asp-items="Model.AddToCart.AllowedQuantities" id="product_enteredQuantity_@Model.AddToCart.ProductId" class="qty-dropdown" aria-label=@T("Products.Qty.AriaLabel")></select>
                    <script asp-location="Footer">
                        $(document).ready(function () {
                            $("#product_enteredQuantity_@Model.AddToCart.ProductId").on("change", function () {
                                var data = {
                                    productId: @Model.AddToCart.ProductId,
                                    quantity: $('#product_enteredQuantity_@Model.AddToCart.ProductId').find(":selected").text()
                                };
                                $(document).trigger({ type: "product_quantity_changed", changedData: data });
                            });
                        });
                    </script>
                }
                else
                {
                    <input asp-for="@Model.AddToCart.EnteredQuantity" id="product_enteredQuantity_@Model.AddToCart.ProductId" class="qty-input" type="text" aria-label=@T("Products.Qty.AriaLabel") />
                    <script asp-location="Footer">
                        //when a customer clicks 'Enter' button we submit the "add to cart" button (if visible)
                        $(document).ready(function() {
                            $("#@Html.IdFor(model => Model.AddToCart.EnteredQuantity)").on("keydown", function(event) {
                                if (event.keyCode == 13) {
                                    $("#add-to-cart-button-@Model.AddToCart.ProductId").trigger("click");
                                    return false;
                                }
                            });

                            $("#product_enteredQuantity_@Model.AddToCart.ProductId").on("input propertychange paste", function () {
                                var data = {
                                    productId: @Model.AddToCart.ProductId,
                                    quantity: $('#product_enteredQuantity_@Model.AddToCart.ProductId').val()
                                };
                                $(document).trigger({ type: "product_quantity_changed", changedData: data });
                            });
                        });
                    </script>
                }
                @{
                    var addToCartText = "";
                    if (Model.AddToCart.UpdatedShoppingCartItemId > 0 && Model.AddToCart.UpdateShoppingCartItemType.HasValue && Model.AddToCart.UpdateShoppingCartItemType.Value == ShoppingCartType.ShoppingCart)
                    {
                        addToCartText = T("ShoppingCart.AddToCart.Update").Text;
                    }
                    else
                    {
                        addToCartText = T("ShoppingCart.AddToCart").Text;
                        if (Model.AddToCart.IsRental)
                        {
                            addToCartText = T("ShoppingCart.Rent").Text;
                        }
                        if (Model.AddToCart.AvailableForPreOrder)
                        {
                            addToCartText = T("ShoppingCart.PreOrder").Text;
                        }
                    }
                    <div class="add-button-wrap">
                        <button type="button" id="add-to-cart-button-@Model.AddToCart.ProductId" class="button-1 add-to-cart-button" data-productid="@Model.AddToCart.ProductId" onclick="AjaxCart.addproducttocart_details('@Url.RouteUrl("AddProductToCart-Details", new {productId = Model.AddToCart.ProductId, shoppingCartTypeId = (int) ShoppingCartType.ShoppingCart})', '#product-details-form');return false;">@addToCartText</button>
                    </div>
                }
            </div>
        }
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsAddInfo, additionalData = Model })
    </div>
    <div class="payment_sprite" >
        <img alt="payment_sprite" src="../Themes/Motion/Content/img/payment_sprite.png" />
    </div>
}
