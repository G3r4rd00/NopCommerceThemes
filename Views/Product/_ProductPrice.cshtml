@model ProductDetailsModel

@using Nop.Core
@using Nop.Core.Domain.Tax

@inject IWorkContext workContext

@if (!Model.ProductPrice.CustomerEntersPrice)
{
    <div class="prices" style="margin-top:30px">
        @if (Model.ProductPrice.CallForPrice)
        {
            @*call for price*@
            <div class="product-price call-for-price">
                <span>@T("Products.CallForPrice")</span>
            </div>
        }
        else
        {
            if (Model.ProductPrice.IsRental)
            {
                <div class="rental-price">
                    <label>@T("Products.Price.RentalPrice"):</label>
                    <span>@Model.ProductPrice.RentalPrice</span>
                </div>
            }
            if (!string.IsNullOrWhiteSpace(Model.ProductPrice.OldPrice) && string.IsNullOrWhiteSpace(Model.ProductPrice.PriceWithDiscount))
            {
                @*old price*@
                <div class="old-product-price">
                    <label>@T("Products.Price.OldPrice"):</label>
                    <span>@Model.ProductPrice.OldPrice</span>
                </div>
            }
            <div class="@if (string.IsNullOrWhiteSpace(Model.ProductPrice.PriceWithDiscount))
         {
                            <text>product-price</text>
                        }
                        else
                        {
                            <text>non-discounted-price</text>
                        }">
                @if (!string.IsNullOrWhiteSpace(Model.ProductPrice.OldPrice) || !string.IsNullOrWhiteSpace(Model.ProductPrice.PriceWithDiscount))
                {
                    @*display "Price:" label if we have old price or discounted one*@
                                            <label for="price-value-@(Model.ProductPrice.ProductId)">@T("Products.Price"):</label>
                }
                @*render price*@
                                <span @if (string.IsNullOrWhiteSpace(Model.ProductPrice.PriceWithDiscount))
                {
                    <text> id="price-value-@(Model.ProductPrice.ProductId)" class="price-value-@(Model.ProductPrice.ProductId)" </text>
                }>
                    @Html.Raw(Model.ProductPrice.Price)
                                </span>
                            </div>
            if (!string.IsNullOrWhiteSpace(Model.ProductPrice.PriceWithDiscount))
            {
                @*discounted price*@
                <div class="product-price discounted-price">
                    <label>@T("Products.Price.WithDiscount"):</label>
                    <span class="price-value-@(Model.ProductPrice.ProductId)">
                        @Html.Raw(Model.ProductPrice.PriceWithDiscount)
                    </span>
                </div>
            }
            if (!string.IsNullOrEmpty(Model.ProductPrice.BasePricePAngV))
            {
                <div class="base-price-pangv" id="base-price-pangv-@Model.ProductPrice.ProductId">
                    @Model.ProductPrice.BasePricePAngV
                </div>
            }
            if (Model.ProductPrice.DisplayTaxShippingInfo)
            {
                var inclTax = await workContext.GetTaxDisplayTypeAsync() == TaxDisplayType.IncludingTax;
                //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                //of course, you can modify appropriate locales to include VAT info there
                <div class="tax-shipping-info">
                    @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteTopicUrl("shippinginfo"))
                </div>
            }
        }

    </div>

    @if (!Model.InStock)
    {
        <div class="prices product-price call-for-price" style="background-color:darkred;margin-top:30px">
            <strong>&nbsp;&nbsp;&nbsp;SIN STOCK</strong>
        </div>
    }
}
